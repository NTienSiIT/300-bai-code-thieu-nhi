#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

public class TreeNode {
    public int val;
    public TreeNode left;
    public TreeNode right;

    public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

#!csharp

public class Solution {
    public IList<int> InorderTraversal(TreeNode root) {
        List<int> result = new List<int>();
        InorderHelper(root, result);
        return result;
    }

    private void InorderHelper(TreeNode node, List<int> result) {
        if (node == null) {
            return;
        }
        InorderHelper(node.left, result);
        result.Add(node.val);
        InorderHelper(node.right, result);
    }
}

#!csharp

var root = new TreeNode(1, null, new TreeNode(2, new TreeNode(3)));
var solution = new Solution();
var result = solution.InorderTraversal(root);
Console.WriteLine(string.Join(", ", result)); // Output: 1, 3, 2
