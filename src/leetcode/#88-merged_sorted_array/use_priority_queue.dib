#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

public class Solution {
    public void Merge(int[] nums1, int m, int[] nums2, int n) {
        var pq = new PriorityQueue<int, int>(m + n);

        for (int i = 0; i < m; i++) {
            pq.Enqueue(nums1[i], nums1[i]);
        }

        for (int i = 0; i < n; i++) {
            pq.Enqueue(nums2[i], nums2[i]);
        }

        int index = 0;
        while (pq.Count > 0) {
            nums1[index++] = pq.Dequeue();
        }
    }
}

#!csharp

int[] nums1 = {1, 2, 3, 0, 0, 0};
int[] nums2 = {2, 5, 6};
new Solution().Merge(nums1, 3, nums2, 3);
// nums1 = [1, 2, 2, 3, 5, 6]

foreach (var num in nums1) {
    Console.Write(num + " ");
}
